#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Dhrumil Patel (dpate85)
#
# Describe how and why you modified the baseline code.
#
# The idea of loop unrolling was used to achieve the highest
# speed possible. the loop runs by the factor of 4.
# To avoid stalling, registers %esi and %edi were used which
# are already pushed in ncopy..
# Ele62, Ele63 and Ele64 are the extras that were not used in
# the loop.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl -4, %edx
	jl SUB

Loop:    mrmovl (%ebx), %esi   
 	 mrmovl 4(%ebx), %edi  
 	 rmmovl %esi, (%ecx)   
	  andl %esi, %esi       
 	 jle Npos              
 	 iaddl $1, %eax        

Npos:	 rmmovl %edi, 4(%ecx)  
 	 mrmovl 8(%ebx), %esi   
 	 andl %edi, %edi       
 	 jle Npos2
 	 iaddl $1, %eax        
  
Npos2:  rmmovl %esi, 8(%ecx)    
	 andl %esi, %esi          
 	 jle Npos3                
 	 iaddl $1, %eax         
  
Npos3:	 mrmovl 12(%ebx), %edi  
 	 rmmovl %edi, 12(%ecx)
 	 andl %edi, %edi          
	 jle Elem                
 	 iaddl $1, %eax        

Elem: 	 iaddl $16 , %ebx      
 	 iaddl $16 , %ecx     
 	 iaddl $-4, %edx       
 	 jge Loop             

SUB:	 iaddl $4, %edx        
  
Ele62:	 iaddl $-1 , %edx
	 jl Done                
  	 mrmovl (%ebx), %esi    
 	 mrmovl 4(%ebx), %edi
 	 rmmovl %esi, (%ecx)
 	 andl %esi, %esi
 	 jle Ele63
 	 iaddl $1, %eax


Ele63:	 iaddl $-1 , %edx
 	 jl Done
 	 rmmovl %edi, 4(%ecx)
 	 andl %edi, %edi
 	 jle Ele64
 	 iaddl $1, %eax

Ele64:	 iaddl $-1 , %edx
 	 jl Done
	 mrmovl 8(%ebx), %esi
  	 rmmovl %esi, 8(%ecx)
 	 andl %esi, %esi
 	 jle Done
 	 iaddl $1, %eax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
